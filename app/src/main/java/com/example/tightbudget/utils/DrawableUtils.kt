package com.example.tightbudget.utils

import android.content.Context
import android.graphics.Color
import android.graphics.drawable.GradientDrawable
import android.graphics.drawable.ShapeDrawable
import android.graphics.drawable.shapes.OvalShape
import android.view.View
import androidx.core.content.ContextCompat
import com.example.tightbudget.R

/**
 * Utility class for creating drawable shapes programmatically
 * * This class was generated by ChatGPT and is used to create various drawable shapes.
 *  * It has been modified by me to fit the app's needs.
 */
object DrawableUtils {

    /**
     * Creates a solid circle with the specified color
     */
    fun createCircleDrawable(color: Int): ShapeDrawable {
        val drawable = ShapeDrawable(OvalShape())
        drawable.paint.color = color
        return drawable
    }

    /**
     * Creates a solid circle with the specified color using GradientDrawable
     * (offers more customization options than ShapeDrawable)
     */
    fun createCircle(color: Int, size: Int = -1): GradientDrawable {
        val drawable = GradientDrawable()
        drawable.shape = GradientDrawable.OVAL
        drawable.setColor(color)

        if (size > 0) {
            drawable.setSize(size, size)
        }

        return drawable
    }

    /**
     * Creates a circle with stroke/outline
     */
    fun createCircleOutline(strokeColor: Int, strokeWidth: Int, fillColor: Int = 0): GradientDrawable {
        val drawable = GradientDrawable()
        drawable.shape = GradientDrawable.OVAL
        drawable.setStroke(strokeWidth, strokeColor)

        if (fillColor != 0) {
            drawable.setColor(fillColor)
        }

        return drawable
    }

    /**
     * Creates a rounded rectangle background
     */
    fun createRoundedBackground(color: Int, cornerRadius: Float): GradientDrawable {
        val drawable = GradientDrawable()
        drawable.shape = GradientDrawable.RECTANGLE
        drawable.setColor(color)
        drawable.cornerRadius = cornerRadius
        return drawable
    }

    /**
     * Creates a progress bar background with track and progress colors
     */
    fun createProgressDrawable(trackColor: Int, progressColor: Int): GradientDrawable {
        val drawable = GradientDrawable()
        drawable.shape = GradientDrawable.RECTANGLE
        drawable.setColor(progressColor)
        drawable.cornerRadius = 3f // Match your design
        return drawable
    }

    /**
     * Creates a white circle (replacement for @drawable/circle_white)
     */
    fun createWhiteCircle(context: Context): GradientDrawable {
        return createCircle(ContextCompat.getColor(context, R.color.white))
    }

    /**
     * Creates a yellow circle (replacement for @drawable/circle_yellow)
     */
    fun createYellowCircle(context: Context): GradientDrawable {
        return createCircle(ContextCompat.getColor(context, R.color.yellow))
    }

    /**
     * Creates a light gray circle (replacement for @drawable/circle_gray_light)
     */
    fun createLightGrayCircle(context: Context): GradientDrawable {
        return createCircle(ContextCompat.getColor(context, R.color.background_gray))
    }

    /**
     * Apply circle background to a view
     */
    fun applyCircleBackground(view: View, color: Int) {
        view.background = createCircle(color)
    }

    /**
     * Apply white circle background to a view (for profile icon, etc.)
     */
    fun applyWhiteCircleBackground(view: View, context: Context) {
        view.background = createWhiteCircle(context)
    }

    /**
     * Apply light gray circle background to a view (for transaction icons, badges, etc.)
     */
    fun applyLightGrayCircleBackground(view: View, context: Context) {
        view.background = createLightGrayCircle(context)
    }

    /**
     * Gets the color associated with a spending category
     */
    fun getCategoryColor(context: Context, categoryName: String): Int {
        return when (categoryName) {
            CategoryConstants.HOUSING -> ContextCompat.getColor(context, R.color.teal_light)
            CategoryConstants.FOOD -> ContextCompat.getColor(context, R.color.primary_purple_light)
            CategoryConstants.TRANSPORT -> ContextCompat.getColor(context, R.color.blue_light)
            CategoryConstants.ENTERTAINMENT -> ContextCompat.getColor(context, R.color.orange)
            "Shopping" -> ContextCompat.getColor(context, R.color.yellow)
            "Utilities" -> ContextCompat.getColor(context, R.color.red_light)
            "Health" -> ContextCompat.getColor(context, R.color.green_light)
            else -> ContextCompat.getColor(context, R.color.gray_medium)
        }
    }

    /**
     * Creates a circle indicator for a specific category
     */
    fun getCategoryCircle(context: Context, categoryName: String): GradientDrawable {
        val drawable = GradientDrawable()
        drawable.shape = GradientDrawable.OVAL

        val colorHex = when (categoryName) {
            CategoryConstants.FOOD -> "#4CAF50" // Green
            CategoryConstants.TRANSPORT -> "#FF9800" // Orange
            CategoryConstants.ENTERTAINMENT -> "#9C27B0" // Purple
            CategoryConstants.HOUSING -> "#2196F3" // Blue
            else -> "#9E9E9E" // Grey
        }

        drawable.setColor(android.graphics.Color.parseColor(colorHex))
        return drawable
    }

    /**
     * Gets appropriate progress bar color based on budget status
     */
    fun getBudgetStatusColor(context: Context, spent: Float, budget: Float): Int {
        val percentUsed = (spent / budget) * 100

        return when {
            percentUsed > 100 -> ContextCompat.getColor(context, R.color.red_light)
            percentUsed > 90 -> ContextCompat.getColor(context, R.color.orange)
            else -> ContextCompat.getColor(context, R.color.teal_light)
        }
    }

    /**
     * Creates a highlighted circle drawable for selected/unlocked badges
     */
    fun createHighlightedCircleDrawable(color: Int): GradientDrawable {
        return GradientDrawable().apply {
            shape = GradientDrawable.OVAL
            setColor(color)
            setStroke(6, Color.WHITE) // White border for highlight
        }
    }

    /**
     * Apply a dashed gray circle for locked/unearned badges
     */
    fun applyDashedCircleBackground(view: View, context: Context) {
        val drawable = GradientDrawable().apply {
            shape = GradientDrawable.OVAL
            setColor(ContextCompat.getColor(context, android.R.color.transparent))
            setStroke(
                3, // stroke width
                ContextCompat.getColor(context, R.color.gray_light),
                10f, // dash width
                10f  // dash gap
            )
        }
        view.background = drawable
    }
}