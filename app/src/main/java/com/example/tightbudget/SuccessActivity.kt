package com.example.tightbudget

import android.content.Intent
import android.graphics.Color
import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import com.example.tightbudget.databinding.ActivitySuccessBinding
import com.example.tightbudget.utils.DrawableUtils
import nl.dionsegijn.konfetti.core.Party
import nl.dionsegijn.konfetti.core.Position
import nl.dionsegijn.konfetti.core.emitter.Emitter
import nl.dionsegijn.konfetti.core.models.Shape
import nl.dionsegijn.konfetti.core.models.Size
import nl.dionsegijn.konfetti.xml.KonfettiView
import java.util.concurrent.TimeUnit

class SuccessActivity : AppCompatActivity() {
    private lateinit var binding: ActivitySuccessBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivitySuccessBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Get email from intent and update confirmation message
        val userEmail = intent.getStringExtra("USER_EMAIL") ?: "your.email@example.com"
        binding.confirmationText.text = "A confirmation email has been sent to $userEmail"

        // Set up the UI elements
        applyDecorativeCircleBackgrounds()
        applyCheckmarkBackground()
        animateCheckIcon()
        launchConfetti()

        binding.continueToDashboardButton.setOnClickListener {
            val finalParty = Party(
                speed = 30f,
                maxSpeed = 60f,
                damping = 0.85f,
                spread = 720,
                colors = listOf(
                    0xfffdd835.toInt(),
                    0xff64b5f6.toInt(),
                    0xff81c784.toInt(),
                    0xffff8a65.toInt()
                ),
                emitter = Emitter(duration = 1, TimeUnit.SECONDS).perSecond(300),
                position = Position.Relative(0.5, 0.5),
                size = listOf(Size.SMALL),
                shapes = listOf(Shape.Circle)
            )
            findViewById<KonfettiView>(R.id.konfettiView).start(finalParty)

            binding.continueToDashboardButton.postDelayed({
                // Ensure user session is properly set before navigating
                val userId = intent.getIntExtra("USER_ID", -1)
                if (userId != -1) {
                    // Double-check that user session is saved
                    val sharedPreferences = getSharedPreferences("user_prefs", MODE_PRIVATE)
                    val currentUserId = sharedPreferences.getInt("current_user_id", -1)

                    if (currentUserId != userId) {
                        // If for some reason the session wasn't saved, save it now
                        sharedPreferences.edit().apply {
                            putInt("current_user_id", userId)
                            putBoolean("is_logged_in", true)
                            apply()
                        }
                        Log.d("SuccessActivity", "Fixed user session - set current_user_id to: $userId")
                    }
                }

                val intent = Intent(this, DashboardActivity::class.java)
                intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
                startActivity(intent)
                finish()
            }, 1000)
        }

        binding.resendEmailText.setOnClickListener {
            // Simulate resend
            // TODO: Hook with real logic if needed
            startActivity(Intent(this, SignupActivity::class.java))
        }
    }
    /// Function to launch confetti animation using the Konfetti library (Generated by ChatGPT)
    private fun launchConfetti() {
        val party = Party(
            speed = 30f,
            maxSpeed = 50f,
            damping = 0.9f,
            spread = 360,
            colors = listOf(0xfffdd835.toInt(), 0xff64b5f6.toInt(), 0xff81c784.toInt()),
            emitter = Emitter(duration = 3, TimeUnit.SECONDS).perSecond(80),
            position = Position.Relative(0.5, 0.3),
            size = listOf(Size.SMALL, Size.LARGE),
            shapes = listOf(Shape.Circle, Shape.Square)
        )

        findViewById<KonfettiView>(R.id.konfettiView).start(party)
    }

    private fun applyCheckmarkBackground() {
        // Create a light teal color for the background
        val lightTealColor = Color.parseColor("#E5F8F7")

        // Apply the circle background to the view
        DrawableUtils.applyCircleBackground(binding.checkBgCircle, lightTealColor)
    }

    /// Function to animate the check icon using the Android View Animation API
    private fun animateCheckIcon() {
        binding.successCard.translationY = -40f
        binding.successCard.alpha = 0f
        binding.successCard.animate()
            .alpha(1f)
            .translationY(0f)
            .setDuration(600)
            .start()

        // Animate the whole checkmark container
        binding.checkmarkContainer.scaleX = 0f
        binding.checkmarkContainer.scaleY = 0f
        binding.checkmarkContainer.animate()
            .scaleX(1f)
            .scaleY(1f)
            .setDuration(600)
            .setStartDelay(200)
            .setInterpolator(android.view.animation.BounceInterpolator())
            .start()
    }

    private fun applyDecorativeCircleBackgrounds() {
        // Apply backgrounds to the decorative circles
        DrawableUtils.applyCircleBackground(binding.decorCircle1, getColor(R.color.blue_light))
        DrawableUtils.applyCircleBackground(binding.decorCircle2, getColor(R.color.teal_light))
        DrawableUtils.applyCircleBackground(binding.decorCircle3, getColor(R.color.primary_purple_light))
        DrawableUtils.applyCircleBackground(binding.decorCircle4, getColor(R.color.primary_purple_light))
        DrawableUtils.applyCircleBackground(binding.decorCircle5, getColor(R.color.blue_light))
    }
}